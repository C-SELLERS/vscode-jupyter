# This yml is used for PRs, pre-release, and release build.
# We use the github.event_name to determine what started the workflow to determine which
# situation we are in.

name: Build and Test

permissions:
  deployments: write

on:
  pull_request:
    branches:
      - main
      - 'qc-release'
      - 'qc-release/*'
      - 'qc-release-*'
  check_run:
    types: [rerequested, requested_action]
  push:
    branches:
      - main
      - 'qc-release'
      - 'qc-release/*'
      - 'qc-release-*'
  schedule:
    - cron: '0 9 * * 1-5' # 9am UTC, Monday-Friday (2am PDT, after VS Code pre-release builds which is 11pm PDT)
  workflow_dispatch:
    inputs:
      publishPreRelease:
        description: 'Publish Pre-Release'
        required: false
        default: 'Do not publish'
        type: choice
        options:
          - Do not publish
          - Yes, publish pre-release

env:
  NODE_VERSION: 16.13.0
  PYTHON_VERSION: 3.8
  JULIA_VERSION: 1.5.2
  MOCHA_REPORTER_JUNIT: true # Use the mocha-multi-reporters and send output to both console (spec) and JUnit (mocha-junit-reporter). Also enables a reporter which exits the process running the tests if it haven't already.
  CACHE_NPM_DEPS: cache-npm
  CACHE_OUT_DIRECTORY: cache-out-directory
  CACHE_PIP_DEPS: cache-pip
  VSC_JUPYTER_FORCE_LOGGING: 'true'
  VSC_PYTHON_FORCE_LOGGING: 'true'
  VSC_JUPYTER_CI_RUN_NON_PYTHON_NB_TEST: 'true'
  # Key for the cache created at the end of the the 'Cache ./pythonFiles/lib/python' step.
  CACHE_PYTHONFILES: cache-pvsc-pythonFiles
  COVERAGE_REPORTS: tests-coverage-reports
  TEST_RESULTS_DIRECTORY: .
  TEST_RESULTS_GLOB: '**/test-results*.xml'
  IPYWIDGET_SCREENSHOT_PATH: '*-screenshot.png'
  DISABLE_INSIDERS_EXTENSION: 1 # Disable prompts to install pre-release in tests (else it blocks activation of extension).
  VSC_JUPYTER_INSTRUMENT_CODE_FOR_COVERAGE: true
  VSIX_NAME_PYTHON: 'ms-python-insiders.vsix'
  VSC_JUPTYER_PYTHON_EXTENSION_VERSION: 'stable'
  VSC_JUPYTER_LOG_KERNEL_OUTPUT: true
  DOTNET_VERSION: 6.0.x

jobs:
  # Make sure to cancel previous runs on a push
  cancel_previous_runs:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

  pick_environment:
    name: Pick Environment
    runs-on: ubuntu-latest
    outputs:
      vsix_name: ${{ env.vsix_name }}
      test_matrix_os: ${{ env.test_matrix_os }}
      release_channel: ${{ env.release_channel }}
      package_command: ${{ env.package_command }}
    steps:
      - name: dump_event
        uses: crazy-max/ghaction-dump-context@v1

      - name: default_package
        run: |
          echo "package_command=package" >> $GITHUB_ENV

      - name: pr
        if: github.event_name == 'pull_request'
        run: |
          echo "vsix_name=ms-toolsai-jupyter-insiders.vsix" >> $GITHUB_ENV
          echo "test_matrix_os=[\"ubuntu-latest\", \"windows-latest\"]" >> $GITHUB_ENV

      - name: pre-release
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event.inputs.publishPreRelease == 'Yes, publish pre-release') && github.ref == 'refs/heads/main'
        # We're not running CI on macOS for now because it's one less matrix entry to lower the number of runners used,
        # macOS runners are expensive, and we assume that Ubuntu is enough to cover the UNIX case.
        run: |
          echo "vsix_name=ms-toolsai-jupyter-insiders.vsix" >> $GITHUB_ENV
          echo "test_matrix_os=[\"ubuntu-latest\", \"windows-latest\"]" >> $GITHUB_ENV

      - name: release
        if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && contains(github.ref, 'refs/heads/qc-release')
        run: |
          echo "vsix_name=ms-toolsai-jupyter-release.vsix" >> $GITHUB_ENV
          echo "test_matrix_os=[\"ubuntu-latest\"]" >> $GITHUB_ENV

  build-vsix:
    needs: pick_environment
    name: Build VSIX
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node ${{env.NODE_VERSION}}
        uses: actions/setup-node@v2.4.1
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Use Python ${{env.PYTHON_VERSION}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{env.PYTHON_VERSION}}

      # Caching of npm packages (https://github.com/actions/cache/blob/main/examples.md#node---npm)
      - name: Cache npm on linux/mac
        uses: actions/cache@v2.1.4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Python libs
        run: |
          python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r ./requirements.txt

      - run: npm i -g vsce

      - name: Build VSIX
        uses: ./.github/actions/build-vsix
        with:
          package_command: ${{ needs.pick_environment.outputs.package_command }}
        id: build-vsix

      - name: Rename VSIX for release branch
        if: steps.build-vsix.outputs.path != needs.pick_environment.outputs.vsix_name
        run: mv ${{ steps.build-vsix.outputs.path }} ${{ needs.pick_environment.outputs.vsix_name }}

      - uses: actions/upload-artifact@v2
        with:
          name: ${{needs.pick_environment.outputs.vsix_name}}
          path: ${{needs.pick_environment.outputs.vsix_name}}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache pip files
        uses: actions/cache@v2.1.4
        with:
          path: ~/.cache/pip
          key: ${{runner.os}}-${{env.CACHE_PIP_DEPS}}-${{env.PYTHON_VERSION}}

      - name: Cache npm files
        uses: actions/cache@v2.1.4
        with:
          path: ~/.npm
          key: ${{runner.os}}-${{env.CACHE_NPM_DEPS}}-${{hashFiles('package-lock.json')}}

      - name: Install dependencies (npm ci)
        run: npm ci --prefer-offline

      - name: Verify linting is turned on for changed files
        uses: ./.github/actions/check-ignore-list
        id: check-ignore-list

      - name: Verify Translation files
        run: npm run validateTranslationFiles

      - name: Run linting on TypeScript code (eslint)
        run: npm run lint

      - name: Run prettier on TypeScript code
        run: npx prettier 'src/**/*.ts*' --check

      - name: Run prettier on JavaScript code
        run: npx prettier 'build/**/*.js' --check

      - name: Use Python ${{env.PYTHON_VERSION}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{env.PYTHON_VERSION}}

      - name: Run Black on Python code
        run: |
          python -m pip install -U black
          python -m black . --check
        working-directory: pythonFiles

      - name: Run gulp prePublishNonBundle
        run: npm run prePublishNonBundle

      - name: Cache the out/ directory
        uses: actions/cache@v2.1.4
        with:
          path: ./out
          key: ${{runner.os}}-${{env.CACHE_OUT_DIRECTORY}}-${{hashFiles('src/**')}}

      - name: Check dependencies
        run: npm run checkDependencies

      - name: 'Check for telemetry edit'
        uses: brettcannon/check-for-changed-files@v1.1.0
        with:
          prereq-pattern: './src/telemetry/index.ts'
          file-pattern: 'telemetry.md'
          skip-label: 'skip telemetry'
          failure-message: 'TELEMETRY.md should be updated when adding or removing telemetry. Please run "npm run generateTelemetry"'

    #   - name: 'Check for news entry'
    #     uses: brettcannon/check-for-changed-files@v1.1.0
    #     with:
    #       file-pattern: 'news/*/*.md'
    #       skip-label: 'skip news'
    #       failure-message: 'News entry file missing; see news/README.md for instructions (the ${skip-label} label can be used to pass this check)'

  ts_tests:
    needs: pick_environment
    name: Type Script Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{fromJson(needs.pick_environment.outputs.test_matrix_os)}}
        test-suite: [ts-unit]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node ${{env.NODE_VERSION}}
        uses: actions/setup-node@v2.4.1
        with:
          node-version: ${{env.NODE_VERSION}}

      # Caching of npm packages (https://github.com/actions/cache/blob/main/examples.md#node---npm)
      - name: Cache npm on linux/mac
        uses: actions/cache@v2.1.4
        if: matrix.os != 'windows-latest'
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Get npm cache directory
        if: matrix.os == 'windows-latest'
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - name: Cache npm on windows
        uses: actions/cache@v2.1.4
        if: matrix.os == 'windows-latest'
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache compiled TS files
        # Use an id for this step so that its cache-hit output can be accessed and checked in the next step.
        id: out-cache
        uses: actions/cache@v2.1.4
        with:
          path: ./out
          key: ${{runner.os}}-${{env.CACHE_OUT_DIRECTORY}}-${{hashFiles('src/**')}}

      - name: Install dependencies (npm ci)
        run: npm ci --prefer-offline

      - name: Compile if not cached
        run: npm run prePublishNonBundle
        env:
          CI_JUPYTER_FAST_COMPILATION: 'true'

        # if: steps.out-cache.outputs.cache-hit == false
      - name: Run TypeScript unit tests
        id: test_unittests
        run: npm run test:unittests

      - name: Publish Test Report
        uses: scacap/action-surefire-report@v1
        if: steps.test_unittests.outcome == 'failure' && failure()
        with:
          github_token: ${{ secrets.TOKEN_TO_CREATE_RELEASE }}
          report_paths: ${{ env.TEST_RESULTS_GLOB }}
          check_name: Ts-Unit Test Report

      - name: Create coverage folder (if not created)
        run: npm run createNycFolder

      # Upload unit test coverage reports for later use in the "reports" job.
      - name: Upload unit test coverage reports
        uses: actions/upload-artifact@v2
        if: "(success() || failure()) && !contains(github.ref, 'refs/heads/release')"
        with:
          name: ${{runner.os}}-${{env.COVERAGE_REPORTS}}
          path: .nyc_output
          retention-days: 1

  vscodeTests:
    name: Tests # These tests run with Python extension & real Jupyter
    runs-on: ${{ matrix.os }}
    env:
      VSC_FORCE_REAL_JUPYTER: 1
      VSC_PYTHON_FORCE_LOGGING: 1
      VSC_JUPYTER_CI_RUN_NON_PYTHON_NB_TEST: 1
    strategy:
      fail-fast: false
      matrix:
        jupyter: [raw, local]
        python: [nonConda, conda]
        pythonVersion: ['3.9', '3.10']
        # We're not running CI on macOS for now because it's one less matrix entry to lower the number of runners used,
        # macOS runners are expensive, and we assume that Ubuntu is enough to cover the UNIX case.
        os: [ubuntu-latest]
        # More details on includes/excludes can be found here https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#example-including-additional-values-into-combinations
        # Basically with exclude, you can exclude any of the combinations from the result matrix.
        # & with include, you can include additional items to the result matrix.
        include:
          - jupyter: remote # We don't care how remote is started (we only want to test connecting to it)
            python: nonConda
            pythonVersion: '3.9'
            os: ubuntu-latest
          - jupyter: raw
            python: noPython
            os: ubuntu-latest
          - os: windows-latest
            python: nonConda
            pythonVersion: '3.10'
            jupyter: raw
        exclude:
          - python: conda # Conda does't seem to support 3.10 yet.
            pythonVersion: '3.10'
        #   - pythonVersion: '3.9'
        #     python: nonConda
        #     jupyter: raw
        #     os: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download Python VSIX
        run: az storage blob download --file ${{env.VSIX_NAME_PYTHON}} --account-name pvsc --container-name extension-builds --name ${{ env.VSIX_NAME_PYTHON }}

      - name: Use Python ${{matrix.pythonVersion}}
        uses: actions/setup-python@v2
        if: matrix.python != 'conda' && matrix.python != 'noPython'
        with:
          python-version: ${{matrix.pythonVersion}}

      - name: Cache conda on linux
        uses: actions/cache@v2
        if: matrix.python == 'conda'
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-conda-${{
            hashFiles('./build/conda-test-requirements.yml') }}

      - name: Use Conda Python ${{matrix.pythonVersion}}
        uses: conda-incubator/setup-miniconda@v2
        if: matrix.python == 'conda'
        with:
          auto-update-conda: true
          activate-environment: functional_test_env
          channels: conda-forge,default
          environment-file: ./build/conda-test-requirements.yml
          python-version: ${{matrix.pythonVersion}}

      - name: Set CI Path
        uses: ./.github/actions/set-python
        id: set-python
        if: matrix.python != 'conda' && matrix.python != 'noPython'
        with:
          PYTHON_VERSION: ${{matrix.pythonVersion}}

      - name: Set CI Path for Conda
        uses: ./.github/actions/set-python-conda
        id: set-python-conda
        if: matrix.python == 'conda'
        with:
          PYTHON_VERSION: ${{matrix.pythonVersion}}

      - name: Upgrade pip
        run: python -m pip install -U pip
        if: matrix.python != 'conda' && matrix.python != 'noPython'

      - name: Use Node ${{env.NODE_VERSION}}
        uses: actions/setup-node@v2.4.1
        with:
          node-version: ${{env.NODE_VERSION}}

      # Start caching

      # Cache Python Dependencies.
      # Caching (https://github.com/actions/cache/blob/main/examples.md#python---pip
      - name: Cache pip on linux
        uses: actions/cache@v2.1.4
        if: matrix.os == 'ubuntu-latest' && matrix.python != 'conda' && matrix.python != 'noPython'
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{env.PYTHON_VERSION}}-${{ hashFiles('requirements.txt') }}-${{hashFiles('build/venv-test-requirements.txt')}}
          restore-keys: |
            ${{ runner.os }}-pip-${{env.PYTHON_VERSION}}-

      - name: Cache pip on mac
        uses: actions/cache@v2.1.4
        if: matrix.os == 'macos-latest' && matrix.python != 'conda' && matrix.python != 'noPython'
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{env.PYTHON_VERSION}}-${{ hashFiles('requirements.txt') }}-${{hashFiles('build/venv-test-requirements.txt')}}
          restore-keys: |
            ${{ runner.os }}-pip-${{env.PYTHON_VERSION}}-

      - name: Cache pip on windows
        uses: actions/cache@v2.1.4
        if: matrix.os == 'windows-latest' && matrix.python != 'conda' && matrix.python != 'noPython'
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{env.PYTHON_VERSION}}-${{ hashFiles('requirements.txt') }}-${{hashFiles('build/venv-test-requirements.txt')}}
          restore-keys: |
            ${{ runner.os }}-pip-${{env.PYTHON_VERSION}}-

      # Caching of npm packages (https://github.com/actions/cache/blob/main/examples.md#node---npm)
      - name: Cache npm on linux/mac
        uses: actions/cache@v2.1.4
        if: matrix.os != 'windows-latest'
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Get npm cache directory
        if: matrix.os == 'windows-latest'
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - name: Cache npm on windows
        uses: actions/cache@v2.1.4
        if: matrix.os == 'windows-latest'
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache compiled TS files
        id: out-cache
        uses: actions/cache@v2.1.4
        with:
          path: ./out
          key: ${{runner.os}}-${{env.CACHE_OUT_DIRECTORY}}-${{hashFiles('src/**')}}

      # For faster/better builds of sdists.
      - run: python -m pip install wheel
        shell: bash
        if: matrix.python != 'conda' && matrix.python != 'noPython'

      # debugpy is not shipped, only installed for local tests.
      # In production, we get debugpy from python extension.
      - name: Install Python Libs
        if: matrix.python != 'conda' && matrix.python != 'noPython'
        run: |
          python --version
          python -c "import sys;print(sys.executable)"
          python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r ./requirements.txt
          python -m pip --disable-pip-version-check install -r build/venv-test-requirements.txt
          python ./pythonFiles/install_debugpy.py
          python -m ipykernel install --user

      - name: Install Python Libs for conda
        shell: bash -l {0}
        if: matrix.python == 'conda'
        run: |
          conda activate functional_test_env
          python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r ./requirements.txt
          python -m pip --disable-pip-version-check install -r build/conda-nonconda-test-requirements.txt
          python ./pythonFiles/install_debugpy.py
          beakerx_kernel_java install
          conda install pytorch cpuonly -c pytorch

        # This step is slow.
      - name: Install dependencies (npm ci)
        run: npm ci --prefer-offline

      - name: Install screen capture dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install imagemagick

        # This step is slow.
      - name: Compile if not cached
        run: npm run prePublishNonBundle
        env:
          CI_JUPYTER_FAST_COMPILATION: 'true'

      # Used by tests for non-python kernels.
      # Test are enabled via env variable `VSC_JUPYTER_CI_RUN_NON_PYTHON_NB_TEST`
      - name: Install Julia
        if: matrix.os != 'windows-latest'
        uses: julia-actions/setup-julia@v1
        with:
          version: ${{env.JULIA_VERSION}}

      - name: Install Julia Kernel
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          julia -e '
            using Pkg
            Pkg.add("IJulia")'

      - name: Install Dot.net
        if: matrix.os != 'windows-latest'
        uses: actions/setup-dotnet@v1.8.0
        with:
          dotnet-version: ${{env.DOTNET_VERSION}}

      - name: Install .NET Interactive
        if: matrix.os != 'windows-latest'
        shell: bash -l {0}
        run: dotnet tool install -g --add-source "https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json" Microsoft.dotnet-interactive

      - name: Install .NET Kernel
        if: matrix.os != 'windows-latest'
        shell: bash -l {0}
        run: dotnet interactive jupyter install

      - name: Create Virtual Env for Tests
        uses: ./.github/actions/create-venv-for-tests
        if: matrix.python != 'conda' && matrix.python != 'noPython' && matrix.os != 'windows-latest' && matrix.jupyter != 'remote'

      - name: Create temp folder for user data dir
        run: |
          echo "VSC_JUPYTER_USER_DATA_DIR=$(mktemp -d)" >> $GITHUB_ENV
          echo ${{env.VSC_JUPYTER_USER_DATA_DIR}} is user data dir

      # Set the correct xvfb commands to run vscode tests
      # https://code.visualstudio.com/api/working-with-extensions/continuous-integration
      # Note that xvfb github action only runs through xvfb on linux, so only set the commands there
      # as on windows / mac they would get directly passed to run, not xvfb-run
      - name: Set xvfb parameters linux
        if: matrix.os == 'ubuntu-latest'
        run: echo "xvfbCommand=--server-args=\"-screen 0 1024x768x24\"" >> $GITHUB_ENV

      - name: Publish VSCode Test Report
        uses: scacap/action-surefire-report@v1
        with:
          github_token: ${{ secrets.TOKEN_TO_CREATE_RELEASE }}
          report_paths: ${{ env.TEST_RESULTS_GLOB }}
          check_name: VSCode Test Report
        if: (steps.test_vscode.outcome == 'failure' || steps.test_vscode.outcome == 'failure') && failure()

      - name: Run Native Notebook with VSCode & Jupyter (ubuntu)
        uses: GabrielBB/xvfb-action@v1.4
        with:
          run: ${{ env.xvfbCommand }} npm run testNativeNotebooksInVSCode
        env:
          VSC_FORCE_REAL_JUPYTER: 1
          VSC_JUPYTER_FORCE_LOGGING: 1
          VSC_PYTHON_FORCE_LOGGING: 1
          VSC_JUPYTER_CI_RUN_NON_PYTHON_NB_TEST: 1
          VSC_JUPYTER_REMOTE_NATIVE_TEST: ${{ matrix.jupyter == 'remote' }}
          VSC_JUPYTER_NON_RAW_NATIVE_TEST: ${{ matrix.jupyter == 'local' }}
          VSC_JUPYTER_CI_RUN_JAVA_NB_TEST: ${{ matrix.python == 'conda' }}
          VSC_JUPYTER_CI_IS_CONDA: ${{ matrix.python == 'conda' }}
          VSC_JUPYTER_CI_TEST_VSC_CHANNEL: 'insiders'
        id: test_notebook_vscode_ubuntu
        if: matrix.python != 'noPython' && matrix.os == 'ubuntu-latest'

      - name: Run Native Notebook with VSCode & Jupyter (windows)
        run: |
          npm run testNativeNotebooksInVSCodeWithoutTestSuffix
        env:
          VSC_FORCE_REAL_JUPYTER: 1
          VSC_JUPYTER_FORCE_LOGGING: 1
          VSC_PYTHON_FORCE_LOGGING: 1
          VSC_JUPYTER_CI_RUN_NON_PYTHON_NB_TEST: 1
          VSC_JUPYTER_REMOTE_NATIVE_TEST: ${{ matrix.jupyter == 'remote' }}
          VSC_JUPYTER_NON_RAW_NATIVE_TEST: ${{ matrix.jupyter == 'local' }}
          VSC_JUPYTER_CI_RUN_JAVA_NB_TEST: ${{ matrix.python == 'conda' }}
          VSC_JUPYTER_CI_IS_CONDA: ${{ matrix.python == 'conda' }}
          VSC_JUPYTER_CI_TEST_VSC_CHANNEL: 'insiders'
          TEST_FILES_SUFFIX: '+(interrupt|execut)*.vscode.test'
        id: test_notebook_vscode_windows
        if: matrix.python != 'noPython' && matrix.os == 'windows-latest'

      - name: Publish Notebook Test Report
        uses: scacap/action-surefire-report@v1
        with:
          github_token: ${{ secrets.TOKEN_TO_CREATE_RELEASE }}
          report_paths: ${{ env.TEST_RESULTS_GLOB }}
          check_name: Notebook Test Report ${{matrix.os}} ${{matrix.pythonVersion}} ${{matrix.python}} ${{matrix.jupyter}}
        if: (steps.test_notebook_vscode_windows.outcome == 'failure' || steps.test_notebook_vscode_ubuntu.outcome == 'failure') && failure()

      - name: Run Native Notebook with VSCode & Jupyter (without Python)
        uses: GabrielBB/xvfb-action@v1.4
        with:
          run: ${{ env.xvfbCommand }} npm run testNativeNotebooksWithoutPythonInVSCode
        env:
          VSC_FORCE_REAL_JUPYTER: 1
          VSC_JUPYTER_FORCE_LOGGING: 1
          VSC_JUPYTER_CI_RUN_NON_PYTHON_NB_TEST: 1
          VSC_JUPYTER_CI_TEST_VSC_CHANNEL: 'insiders'
        id: test_notebookWithoutPythonExt_vscode
        if: matrix.python == 'noPython' && matrix.os != 'windows-latest'

      - name: Publish Notebook Test Report
        uses: scacap/action-surefire-report@v1
        with:
          github_token: ${{ secrets.TOKEN_TO_CREATE_RELEASE }}
          report_paths: ${{ env.TEST_RESULTS_GLOB }}
          check_name: Notebook without Python Test Report ${{matrix.os}} ${{matrix.pythonVersion}} ${{matrix.python}} ${{matrix.jupyter}}
        if: steps.test_notebookWithoutPythonExt_vscode.outcome == 'failure' && failure()

      - name: Create coverage folder (if not created)
        run: npm run createNycFolder

      # Upload unit test coverage reports for later use in the "reports" job.
      - name: Upload unit test coverage reports
        uses: actions/upload-artifact@v2
        if: "(success() || failure()) && !contains(github.ref, 'refs/heads/release')"
        with:
          name: ${{runner.os}}-${{env.COVERAGE_REPORTS}}
          path: .nyc_output
          retention-days: 1

      - name: Upload screenshots
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Screenshots-${{matrix.os}}-${{matrix.pythonVersion}}-${{matrix.python}}-${{matrix.jupyter}}
          path: './${{env.IPYWIDGET_SCREENSHOT_PATH}}'
          retention-days: 1

      - name: Upload VS code logs
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: VSCodeLogs-${{matrix.os}}-${{matrix.pythonVersion}}-${{matrix.python}}-${{matrix.jupyter}}
          path: '${{env.VSC_JUPYTER_USER_DATA_DIR}}/logs/**/*'
          retention-days: 1

      - name: Upload Memory snapshot
        uses: actions/upload-artifact@v2
        with:
          name: SD-memtest.json
          path: './SD-memtest.json'
          retention-days: 20

  smoke-tests:
    timeout-minutes: 30
    name: Smoke tests
    # The value of runs-on is the OS of the current job (specified in the strategy matrix below) instead of being hardcoded.
    runs-on: ${{ matrix.os }}
    needs: [build-vsix, pick_environment]
    env:
      VSIX_NAME: ${{ needs.pick_environment.outputs.vsix_name }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: [3.9]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Python ${{matrix.python}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python}}

      - name: Set CI Path
        uses: ./.github/actions/set-python
        id: set-python
        with:
          PYTHON_VERSION: ${{matrix.python}}

      - name: Upgrade pip
        run: python -m pip install -U pip

      - name: Use Node ${{env.NODE_VERSION}}
        uses: actions/setup-node@v2.4.1
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Download VSIX
        uses: actions/download-artifact@v2
        with:
          name: ${{needs.pick_environment.outputs.vsix_name}}

      - name: Install dependencies (npm ci)
        run: npm ci --prefer-offline

      - name: pip install system test requirements
        run: |
          python -m pip install --upgrade -r build/venv-test-requirements.txt
          python -m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r requirements.txt
        shell: bash

      # Compile the test files.
      - name: Prepare for smoke tests
        run: npx tsc -p ./
        shell: bash

      - name: Run smoke tests
        env:
          DISPLAY: 10
        uses: GabrielBB/xvfb-action@v1.4
        with:
          run: npm run testSmokeLogged

      - name: Upload smoke-test log
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: smoke-test-${{matrix.os}}.log
          path: './smoke-test.log'

      - name: Create coverage folder (if not created)
        run: npm run createNycFolder

      # Upload unit test coverage reports for later use in the "reports" job.
      - name: Upload unit test coverage reports
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: ${{runner.os}}-${{env.COVERAGE_REPORTS}}
          path: .nyc_output
          retention-days: 1

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [pick_environment, build-vsix, smoke-tests]
    environment:
      name: ${{needs.pick_environment.outputs.release_channel}}
    steps:
      - name: dump_event
        run: |
          echo "Event_name is ${{ github.event_name }}"
          echo "Ref is ${{ github.ref }}"
          echo "Release Channel (Environment) is is ${{needs.pick_environment.outputs.release_channel}}"
          echo "VSIX Name is ${{ needs.pick_environment.outputs.vsix_name }}"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Python ${{env.PYTHON_VERSION}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{env.PYTHON_VERSION}}

      - name: Use Node ${{env.NODE_VERSION}}
        uses: actions/setup-node@v2.4.1
        with:
          node-version: ${{env.NODE_VERSION}}

      - run: npm i -g vsce

      - name: Download VSIX
        uses: actions/download-artifact@v2
        with:
          name: ${{needs.pick_environment.outputs.vsix_name}}

      - name: Extract Extension
        if: needs.pick_environment.outputs.release_channel == 'stable'
        shell: bash
        run: |
          python -c "import zipfile;zip=zipfile.ZipFile('${{needs.pick_environment.outputs.vsix_name}}', 'r');zip.extractall('tmp')"

      - name: Get Version
        if: needs.pick_environment.outputs.release_channel == 'stable'
        id: version
        run: |
          echo ::set-output name=version::$(node -p -e "require('./package.json').version")
        shell: bash

      - name: Print version
        run: |
          echo ${{steps.version.outputs.version}}
        shell: bash

      - name: Create GH Release
        id: create_release
        if: needs.pick_environment.outputs.release_channel == 'stable'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{steps.version.outputs.version}}
          release_name: Release ${{steps.version.outputs.version}}
          body_path: RELEASE_CHANGELOG.md
          draft: false
          prerelease: false

      - name: Upload VSIX to release
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{needs.pick_environment.outputs.vsix_name}}
          asset_name: ${{needs.pick_environment.outputs.vsix_name}}
          asset_content_type: application/zip
